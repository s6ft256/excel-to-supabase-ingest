-- Profiles table to extend Supabase Auth
CREATE TABLE public.profiles (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE UNIQUE,
  username TEXT UNIQUE,
  role TEXT CHECK (role IN ('admin', 'hse_manager', 'contractor', 'viewer')) DEFAULT 'viewer',
  company TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Enable RLS
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- Profiles policies
CREATE POLICY "Users can view all profiles" ON public.profiles FOR SELECT USING (true);
CREATE POLICY "Users can insert their own profile" ON public.profiles FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can update their own profile" ON public.profiles FOR UPDATE USING (auth.uid() = user_id);

-- Incidents Table
CREATE TABLE public.incidents (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  inserted_at TIMESTAMPTZ DEFAULT NOW(),
  date DATE NOT NULL,
  contractor_id UUID REFERENCES public.profiles(id),
  activity TEXT,
  description TEXT,
  severity_level INTEGER,
  type TEXT
);

-- Enable RLS
ALTER TABLE public.incidents ENABLE ROW LEVEL SECURITY;

-- Incidents policies
CREATE POLICY "Users can view all incidents" ON public.incidents FOR SELECT USING (true);
CREATE POLICY "Authenticated users can insert incidents" ON public.incidents FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY "Users can update incidents" ON public.incidents FOR UPDATE TO authenticated USING (true);

-- Incident Details Table
CREATE TABLE public.incident_details (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  incident_id BIGINT NOT NULL REFERENCES public.incidents(id) ON DELETE CASCADE,
  body_part TEXT,
  nature_of_injury TEXT,
  mechanism TEXT,
  agency_source TEXT,
  immediate_cause TEXT
);

-- Enable RLS
ALTER TABLE public.incident_details ENABLE ROW LEVEL SECURITY;

-- Incident details policies
CREATE POLICY "Users can view all incident details" ON public.incident_details FOR SELECT USING (true);
CREATE POLICY "Authenticated users can insert incident details" ON public.incident_details FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY "Users can update incident details" ON public.incident_details FOR UPDATE TO authenticated USING (true);

-- Inspections Table
CREATE TABLE public.inspections (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  inserted_at TIMESTAMPTZ DEFAULT NOW(),
  date DATE NOT NULL,
  score DECIMAL(5,2),
  type TEXT,
  inspector TEXT
);

-- Enable RLS
ALTER TABLE public.inspections ENABLE ROW LEVEL SECURITY;

-- Inspections policies
CREATE POLICY "Users can view all inspections" ON public.inspections FOR SELECT USING (true);
CREATE POLICY "Authenticated users can insert inspections" ON public.inspections FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY "Users can update inspections" ON public.inspections FOR UPDATE TO authenticated USING (true);

-- Training Sessions Table
CREATE TABLE public.training_sessions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  inserted_at TIMESTAMPTZ DEFAULT NOW(),
  date DATE NOT NULL,
  topic TEXT,
  type TEXT CHECK (type IN ('internal', 'external')),
  no_of_attendees INTEGER,
  conductor TEXT
);

-- Enable RLS
ALTER TABLE public.training_sessions ENABLE ROW LEVEL SECURITY;

-- Training sessions policies
CREATE POLICY "Users can view all training sessions" ON public.training_sessions FOR SELECT USING (true);
CREATE POLICY "Authenticated users can insert training sessions" ON public.training_sessions FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY "Users can update training sessions" ON public.training_sessions FOR UPDATE TO authenticated USING (true);

-- Function to handle new user profiles
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = public
AS $$
BEGIN
  INSERT INTO public.profiles (user_id, username, role, company)
  VALUES (
    NEW.id,
    NEW.raw_user_meta_data->>'username',
    COALESCE(NEW.raw_user_meta_data->>'role', 'viewer'),
    NEW.raw_user_meta_data->>'company'
  );
  RETURN NEW;
END;
$$;

-- Trigger for new user creation
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();